// âœ… Importation des modules nÃ©cessaires
import 'zone.js/node'; // âœ… Angular SSR nÃ©cessite Zone.js pour la gestion asynchrone
import fastify from 'fastify'; // âœ… Fastify est utilisÃ© comme serveur HTTP performant
import { existsSync, readFileSync } from 'fs'; // âœ… Permet de vÃ©rifier et lire des fichiers
import { join } from 'path'; // âœ… Manipulation des chemins de fichiers

// âœ… Importations Angular pour le rendu cÃ´tÃ© serveur (SSR)
import { renderApplication } from '@angular/platform-server';
import { bootstrapApplication } from '@angular/platform-browser';
import { importProvidersFrom } from '@angular/core';
import { provideServerRendering } from '@angular/platform-server';

// âœ… Importation statique des composants Angular et de la configuration
import { AppComponent } from './src/app/app.component'; // âœ… Remplace l'import dynamique
import { config } from './src/app/app.config.server'; // âœ… Remplace l'import dynamique

// âœ… DÃ©finition des chemins de distribution
const distFolder = join(process.cwd(), 'dist/browser'); // ðŸ“‚ Dossier contenant le build Angular
const indexHtmlPath = join(distFolder, 'index.html'); // ðŸ“„ Fichier HTML de base

// âœ… Lire le fichier HTML prÃ©-rendu, sinon fournir un HTML minimal
const indexHtml = existsSync(indexHtmlPath) 
  ? readFileSync(indexHtmlPath, 'utf-8') 
  : '<html><body><app-root></app-root></body></html>';

// âœ… CrÃ©ation du serveur Fastify
const server = fastify(); // ðŸš€ Utilisation de Fastify au lieu d'Express pour de meilleures performances

/**
 * ðŸ“Œ Fonction qui gÃ©nÃ¨re la page HTML pour une URL donnÃ©e avec Server-Side Rendering (SSR)
 * @param url URL demandÃ©e par l'utilisateur
 * @returns HTML gÃ©nÃ©rÃ© par Angular SSR
 */
async function getApplicationHtml(url: string) {
  return renderApplication(() => bootstrapApplication(AppComponent, {
    providers: [
      ...config.providers,  // âœ… Injection des services de configuration
      provideServerRendering() // âœ… Activation du rendu cÃ´tÃ© serveur
    ],
  }), {
    document: indexHtml, // âœ… Utilisation du fichier HTML prÃ©-rendu
    url: url, // âœ… Passage de l'URL pour un rendu SSR correct
  });
}

/**
 * ðŸ“Œ Route pour gÃ©rer toutes les requÃªtes et retourner le rendu SSR d'Angular
 * @param req RequÃªte entrante
 * @param reply RÃ©ponse Ã  envoyer au client
 */
server.get('*', async (req, reply) => {
  try {
    const html = await getApplicationHtml(req.url); // âœ… GÃ©nÃ©rer la page pour l'URL demandÃ©e
    reply.type('text/html').send(html); // âœ… Envoyer le HTML au client
  } catch (error) {
    console.error('Erreur serveur:', error);
    reply.status(500).send('Erreur serveur : ' + error); // âœ… Gestion des erreurs serveur
  }
});

/**
 * ðŸ“Œ DÃ©marrage du serveur sur le port 4000
 */
server.listen({ port: 4000 }, (err, address) => {
  if (err) {
    console.error('Erreur lors du dÃ©marrage du serveur:', err);
    process.exit(1);
  }
  console.log(`ðŸš€ Serveur Angular SSR prÃªt sur ${address}`);
});

export default server;
