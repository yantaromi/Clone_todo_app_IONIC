import { Injectable } from '@angular/core';
import { Task } from '../models/task.model';
import { BehaviorSubject } from 'rxjs';

@Injectable({
  providedIn: 'root'
})
export class TodoService {
  private tasks: Task[] = this.loadTasks(); // âœ… Chargement initial des tÃ¢ches depuis localStorage
  private tasksSubject = new BehaviorSubject<Task[]>(this.tasks); // âœ… Observable pour mise Ã  jour en temps rÃ©el
  tasks$ = this.tasksSubject.asObservable(); // âœ… Observable accessible depuis les composants
  private taskIdCounter: number = this.getMaxTaskId() + 1; // âœ… ID unique basÃ© sur les tÃ¢ches existantes

  constructor() {}

  /** ðŸ“Œ RÃ©cupÃ©rer toutes les tÃ¢ches enregistrÃ©es */
  getTasks(): Task[] {
    return [...this.tasks]; // âœ… Copie pour Ã©viter toute mutation accidentelle
  }

  /** ðŸ“Œ Ajouter une nouvelle tÃ¢che */
  addTask(title: string): void {
    if (!title.trim()) return;
    const newTask: Task = { id: this.generateUniqueId(), title, completed: false };
    this.tasks.push(newTask);
    this.updateTasks(); // âœ… Mise Ã  jour et sauvegarde immÃ©diate
  }

  /** ðŸ“Œ Ajouter plusieurs tÃ¢ches depuis Google Calendar */
  addTasksFromCalendar(events: string[]): void {
    let newTasksAdded = false;

    events.forEach(eventTitle => {
      if (!this.tasks.some(task => task.title === eventTitle)) {
        this.tasks.push({ id: this.generateUniqueId(), title: eventTitle, completed: false });
        newTasksAdded = true;
      }
    });

    if (newTasksAdded) {
      this.updateTasks(); // âœ… Mise Ã  jour uniquement si de nouvelles tÃ¢ches sont ajoutÃ©es
    }
  }

  /** ðŸ“Œ Supprimer une tÃ¢che */
  deleteTask(id: number): void {
    this.tasks = this.tasks.filter(task => task.id !== id);
    this.updateTasks(); // âœ… Mise Ã  jour et sauvegarde immÃ©diate
  }

  /** ðŸ“Œ Basculer l'Ã©tat de complÃ©tion */
  toggleTaskCompletion(id: number): void {
    const task = this.tasks.find(task => task.id === id);
    if (task) {
      task.completed = !task.completed;
      this.updateTasks(); // âœ… Mise Ã  jour et sauvegarde immÃ©diate
    }
  }

  /** ðŸ“Œ Supprimer toutes les tÃ¢ches complÃ©tÃ©es */
  removeCompletedTasks(): void {
    this.tasks = this.tasks.filter(task => !task.completed);
    this.updateTasks(); // âœ… Mise Ã  jour et sauvegarde immÃ©diate
  }

  /** ðŸ“Œ GÃ©nÃ©rer un ID unique */
  private generateUniqueId(): number {
    return this.taskIdCounter++; // âœ… IncrÃ©mentation pour Ã©viter les ID en double
  }

  /** ðŸ“Œ Obtenir le plus grand ID existant */
  private getMaxTaskId(): number {
    return this.tasks.length > 0 ? Math.max(...this.tasks.map(task => task.id)) : 0;
  }

  /** ðŸ“Œ Mise Ã  jour et sauvegarde des tÃ¢ches */
  private updateTasks(): void {
    this.saveTasks(); // âœ… Sauvegarde immÃ©diate dans `localStorage`
    this.tasksSubject.next([...this.tasks]); // âœ… Mise Ã  jour de l'interface utilisateur
  }

  /** ðŸ“Œ Sauvegarde des tÃ¢ches dans `localStorage` */
  private saveTasks(): void {
    localStorage.setItem('tasks', JSON.stringify(this.tasks));
  }

  /** ðŸ“Œ Charger les tÃ¢ches depuis `localStorage` */
  private loadTasks(): Task[] {
    const savedTasks = localStorage.getItem('tasks');
    return savedTasks ? JSON.parse(savedTasks) : [];
  }
}
