import { Injectable } from '@angular/core';
import { Task } from '../models/task.model';
import { BehaviorSubject } from 'rxjs';

@Injectable({
  providedIn: 'root'
})
export class TodoService {
  private tasks: Task[] = this.loadTasks(); // âœ… Chargement initial des tÃ¢ches depuis localStorage
  private tasksSubject = new BehaviorSubject<Task[]>(this.tasks); // âœ… Observable pour la mise Ã  jour en temps rÃ©el des tÃ¢ches
  tasks$ = this.tasksSubject.asObservable(); // âœ… Observable accessible depuis d'autres composants

  constructor() {
    // ğŸ”„ Sauvegarde automatique lorsqu'un changement est dÃ©tectÃ© sur les tÃ¢ches
    this.tasksSubject.subscribe(() => {
      this.saveTasks();
    });
  }

  /**
   * ğŸ“Œ RÃ©cupÃ©rer toutes les tÃ¢ches enregistrÃ©es
   * @returns Liste des tÃ¢ches
   */
  getTasks(): Task[] {
    return [...this.tasks]; // âœ… Retourne une copie pour Ã©viter toute mutation accidentelle
  }

  /**
   * ğŸ“Œ Ajouter une nouvelle tÃ¢che Ã  la liste
   * @param title - Le titre de la tÃ¢che
   */
  addTask(title: string): void {
    if (!title.trim()) return;
    const newTask: Task = { id: Date.now(), title, completed: false };
    this.tasks.push(newTask);
    this.tasksSubject.next([...this.tasks]); // âœ… Mise Ã  jour de l'observable
    this.saveTasks(); // âœ… Sauvegarde immÃ©diate aprÃ¨s ajout
    console.log('TÃ¢che ajoutÃ©e :', newTask);
  }

  /**
   * ğŸ“Œ Supprimer une tÃ¢che par son ID
   * @param id - L'identifiant de la tÃ¢che Ã  supprimer
   */
  deleteTask(id: number): void {
    this.tasks = this.tasks.filter(task => task.id !== id);
    this.tasksSubject.next([...this.tasks]); // âœ… Mise Ã  jour de l'observable
    this.saveTasks(); // âœ… Assurer la sauvegarde immÃ©diate
    console.log('TÃ¢che supprimÃ©e, ID:', id);
  }

  /**
   * ğŸ“Œ Bascule l'Ã©tat de complÃ©tion d'une tÃ¢che
   * @param id - L'identifiant de la tÃ¢che Ã  modifier
   */
  toggleTaskCompletion(id: number): void {
    const task = this.tasks.find(task => task.id === id);
    if (task) {
      task.completed = !task.completed;
      this.tasksSubject.next([...this.tasks]); // âœ… Mise Ã  jour de l'observable
      this.saveTasks(); // âœ… Assurer la sauvegarde immÃ©diate
      console.log('Ã‰tat de la tÃ¢che changÃ©, ID:', id, 'ComplÃ©tÃ©e:', task.completed);
    }
  }

  /**
   * ğŸ“Œ Supprimer toutes les tÃ¢ches complÃ©tÃ©es (appelÃ©e Ã  minuit)
   */
  removeCompletedTasks(): void {
    console.log("ğŸ—‘ Suppression des tÃ¢ches complÃ©tÃ©es...");
    
    // âœ… Supprime les tÃ¢ches complÃ©tÃ©es en mÃ©moire
    this.tasks = this.tasks.filter(task => !task.completed);
  
    // âœ… Ã‰crase immÃ©diatement `localStorage` avec la liste mise Ã  jour
    this.saveTasks();
  
    // âœ… Met Ã  jour l'interface utilisateur
    this.tasksSubject.next([...this.tasks]);
  
    console.log("âœ… TÃ¢ches restantes aprÃ¨s suppression :", this.tasks);
  }
  
  /**
   * ğŸ“Œ Sauvegarder les tÃ¢ches dans `localStorage`
   */
  public saveTasks(): void {
    console.log("ğŸ’¾ Sauvegarde forcÃ©e des tÃ¢ches :", this.tasks);
    
    // âœ… VÃ©rifier si les tÃ¢ches ont changÃ© avant de sauvegarder
    const currentTasks = JSON.stringify(this.tasks);
    const storedTasks = localStorage.getItem('tasks');
    
    if (storedTasks !== currentTasks) {
      localStorage.setItem('tasks', currentTasks); // âœ… Ã‰crit uniquement les nouvelles tÃ¢ches
      this.tasksSubject.next([...this.tasks]); // âœ… Mise Ã  jour immÃ©diate aprÃ¨s sauvegarde
    }
  }
  
  /**
   * ğŸ“Œ Charger les tÃ¢ches depuis `localStorage`
   * @returns Liste des tÃ¢ches enregistrÃ©es ou un tableau vide si aucune tÃ¢che n'est trouvÃ©e
   */
  private loadTasks(): Task[] {
    const savedTasks = localStorage.getItem('tasks');
    return savedTasks ? JSON.parse(savedTasks) : [];
  }
}
