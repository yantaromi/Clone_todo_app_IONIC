import { Injectable } from '@angular/core';
import { Task } from '../models/task.model';
import { BehaviorSubject } from 'rxjs';

@Injectable({
  providedIn: 'root'
})
export class TodoService {
  private tasks: Task[] = this.loadTasks(); // âœ… Chargement des tÃ¢ches depuis localStorage
  private tasksSubject = new BehaviorSubject<Task[]>(this.tasks);
  tasks$ = this.tasksSubject.asObservable(); // âœ… Observable pour mettre Ã  jour en temps rÃ©el

  constructor() {
    this.tasksSubject.subscribe(tasks => {
      this.saveTasks(); // âœ… Sauvegarde automatique lorsqu'il y a un changement
    });
  }

  /**
   * ðŸ“Œ RÃ©cupÃ©rer toutes les tÃ¢ches enregistrÃ©es
   */
  getTasks(): Task[] {
    return this.tasks;
  }

  /**
   * ðŸ“Œ Ajouter une nouvelle tÃ¢che Ã  la liste
   */
  addTask(title: string): void {
    const newTask: Task = { id: Date.now(), title, completed: false };
    this.tasks.push(newTask);
    this.tasksSubject.next([...this.tasks]); // âœ… Mise Ã  jour de la liste
    console.log('TÃ¢che ajoutÃ©e :', newTask);
  }

  /**
   * ðŸ“Œ Supprimer une tÃ¢che par son ID
   */
  deleteTask(id: number): void {
    this.tasks = this.tasks.filter(task => task.id !== id);
    this.tasksSubject.next([...this.tasks]); // âœ… Mise Ã  jour de la liste
    console.log('TÃ¢che supprimÃ©e, ID:', id);
  }

  /**
   * ðŸ“Œ Changer lâ€™Ã©tat de complÃ©tion dâ€™une tÃ¢che
   */
  toggleTaskCompletion(id: number): void {
    const task = this.tasks.find(task => task.id === id);
    if (task) {
      task.completed = !task.completed;
      this.tasksSubject.next([...this.tasks]); // âœ… Mise Ã  jour de la liste
      console.log('Ã‰tat de la tÃ¢che changÃ©, ID:', id, 'ComplÃ©tÃ©e:', task.completed);
    }
  }

  /**
   * ðŸ“Œ Sauvegarder les tÃ¢ches dans `localStorage`
   */
  private saveTasks(): void {
    localStorage.setItem('tasks', JSON.stringify(this.tasks));
  }

  /**
   * ðŸ“Œ Charger les tÃ¢ches depuis `localStorage`
   */
  private loadTasks(): Task[] {
    const savedTasks = localStorage.getItem('tasks');
    return savedTasks ? JSON.parse(savedTasks) : [];
  }
}
